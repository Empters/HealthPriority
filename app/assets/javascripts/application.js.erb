// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/sstephenson/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery.turbolinks
//= require jquery_ujs
//= require jquery-ui
//= require bootstrap.min
//= require royalslider/jquery.royalslider.min
//= require main
//= require turbolinks
//= require_tree .

/* Get application url */
function getUrlRoot() {
    return 'http://' + location.host
}

/* Add jquery extension method */
jQuery.fn.center = function () {
    this.css("position", "absolute");
    this.css("top", Math.max(0, (($(window).height() - $(this).outerHeight()) / 2) +
            $(window).scrollTop()) + "px");
    this.css("left", Math.max(0, (($(window).width() - $(this).outerWidth()) / 2) +
            $(window).scrollLeft()) + "px");
    return this;
}

/* Simple parse and check */
function isInt(value) {
    var x = parseFloat(value);
    return !isNaN(value) && (x | 0) === x;
}

/* Validate product quantity */
function validateProductQuantity(e) {
    // Allow: backspace, delete, tab, escape, enter and .
    if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||
        // Allow: Ctrl+A
            (e.keyCode == 65 && e.ctrlKey === true) ||
        // Allow: home, end, left, right
            (e.keyCode >= 35 && e.keyCode <= 39)) {
        // let it happen, don't do anything
        return;
    }
    // Ensure that it is a number and stop the keypress
    if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
        e.preventDefault();
    }
}

/* Set product count */
function setProductCountToCart(e) {
    var value = $(this).val();
    var count = isInt(value) && parseInt(Number(value)) > 0 ? parseInt(Number(value)) : 0;
    $(this).val(count);

    // Call ajax to change products count
    var product_id = $(this).attr("product_id");
    var url = getUrlRoot() + '/shopping_carts/set_product_count.js'
    $.ajax({
        url: url,
        type: "POST",
        contentType: "application/json; charset=utf-8",
        data: JSON.stringify({ product_id: product_id, count: count })
    });
}

/* Show ajax message */
function show_ajax_message(msg, type) {
    switch (type) {
        case 'notice':
        {
            type = 'info';
            break;
        }
        case 'error':
        {
            type = 'danger';
            break;
        }
    }

    var message = '<div class="alert alert-' + type + ' notification">' +
            '<button class="close" data-dismiss="alert">Ã—</button>' +
            msg +
            '</div>';

    $("#flash-message").append(message);
    show_notifications();
}

/* Show notifications */
function show_notifications() {
    $("#flash-message").center();
    $(".notification").show().delay(3000).fadeOut(300, function () {
        $(this).remove();
    });
}

function getAjaxNotificationMessage(request) {
    var msg = request.getResponseHeader('X-Message');
    var type = request.getResponseHeader('X-Message-Type');
    if (msg && type) {
        return { msg: msg, notificationType: type };
    }

    return null;
}

function initCountryCascadeDropDown(){
    $(document).on('change', '#countries_select', function () {
        $.ajax({
            url: getUrlRoot() + '/home/update_states',
            type: 'GET',
            dataType: 'script',
            data: {
                country_id: $("#countries_select option:selected").val()
            }});
    });
}

function initProductSearchControl(){
    $(document).off('click', '#search_link');
    $(document).on('click', '#search_link', function () {
        var url_arr = document.URL.split('/');
        var page_name = url_arr[3];
        var token = $('#search_input').val();
        if (token != '') {
            token = '/' + token
        }
        var category = $('#chosen_category').attr('selected_category');
        if (category != '') {
            category = '/category/' + category
        }

        if (page_name == 'products' && (url_arr[4] == undefined || url_arr[4] == 'search')) {
            var url = getUrlRoot() + '/products/search' + token + category + '.js';
            $.ajax({
                url: url
            });
        } else {
            var path = getUrlRoot() + '/products/search' + token + category;
            document.location.href = path
        }
    });

    $(document).off('keypress', '#search_input');
    $(document).on('keypress', '#search_input', function (e) {
        if (e.keyCode == 13) {
            $('#search_link').click();
        }
    });

    var productSearch = new Bloodhound({
        datumTokenizer: Bloodhound.tokenizers.obj.whitespace('value'),
        queryTokenizer: Bloodhound.tokenizers.whitespace,
        remote: getUrlRoot() + '/products/autocomplete/%QUERY.json'
    });

    productSearch.initialize();

    $('#search_input').typeahead(null, {
        name: 'product',
        displayKey: 'name',
        source: productSearch.ttAdapter()
    });
}

function initCategoryMenu(){
    $('#category-menu').children('li').click(function () {
        var filter_category = $(this).attr('category') == undefined ? '' : $(this).attr('category');
        $('#chosen_category').attr('selected_category', filter_category);
    });
}

function initProductCart(){
    $(document).on("keydown", ".quantity-js", validateProductQuantity);

    $(document).on("focusout", ".quantity-js", setProductCountToCart);
}

/* Hook document ready - bind js events */
$(document).ready(function () {

    /* Hook document ajax completed - show ajax notification */
    $(document).ajaxComplete(function (event, request) {
        var notification = getAjaxNotificationMessage(request);
        if (notification) {
            show_ajax_message(notification.msg, notification.notificationType);
        }
    });

    /* Hook document ajax errors - show ajax notification */
    $(document).ajaxError(function (event, request) {
        var notification = getAjaxNotificationMessage(request);
        if (notification) {
            show_ajax_message(notification.msg, notification.notificationType);
        }
        else {
            show_ajax_message("Application error!", "error");
        }
    });

    initProductSearchControl();

    initCategoryMenu();

    initProductCart();

    initCountryCascadeDropDown();

    show_notifications();
});